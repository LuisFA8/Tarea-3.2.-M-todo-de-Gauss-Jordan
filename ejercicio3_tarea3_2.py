# -*- coding: utf-8 -*-
"""Ejercicio3_Tarea3.2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YhIyxh6tnTyWo2cjw3ajkESLMtkNZs_R
"""

import numpy as np

def resolver_sistema_gauss_jordan(A, b):
    """
    Resuelve un sistema de ecuaciones lineales Ax = b utilizando el método de Gauss-Jordan con pivoteo parcial.
    También calcula el determinante de A para verificar si el sistema tiene solución única.
    """
    n = len(A)
    # Crear la matriz aumentada
    matriz_aumentada = np.hstack([A, b.reshape(-1, 1)]).astype(float)

    # Calcular el determinante de A
    determinante_A = np.linalg.det(A)

    # Verificar si el sistema tiene una única solución
    if np.isclose(determinante_A, 0):
        print(f"Determinante de A: {determinante_A:.5f}. El sistema es indeterminado o no tiene solución única.")
        return None

    print(f"Determinante de A: {determinante_A:.5f}. El sistema tiene solución única.")

    # Aplicar el método de Gauss-Jordan con pivoteo parcial
    for i in range(n):
        # Pivoteo parcial: encontrar la fila con el valor absoluto máximo en la columna actual
        fila_max = np.argmax(abs(matriz_aumentada[i:, i])) + i
        if i != fila_max:
            matriz_aumentada[[i, fila_max]] = matriz_aumentada[[fila_max, i]]

        # Normalizar la fila pivote
        matriz_aumentada[i] /= matriz_aumentada[i, i]

        # Eliminación en las demás filas
        for j in range(n):
            if i != j:
                matriz_aumentada[j] -= matriz_aumentada[j, i] * matriz_aumentada[i]

    # Extraer la solución del sistema
    solucion = matriz_aumentada[:, -1]
    return solucion

# Definir la matriz de coeficientes y el vector de términos independientes
A_test = np.array([
    [3, -2, 5, -1, 4, 2, -3, 1, 2],
    [-2, 4, -3, 1, 5, -1, 2, -4, 3],
    [5, -1, 2, -3, 4, -6, -2, 3, -1],
    [1, -3, 2, -2, 5, -6, 2, -3, 5],
    [2, 3, -1, -4, 2, 5, -3, 1, -2],
    [-3, 2, 4, 3, -3, -2, 5, -1, 9],
    [4, -1, 3, 2, -3, -1, -2, 5, -4],
    [-1, 5, -2, 3, 4, -1, 2, -3, 8],
    [3, -2, 5, -3, 4, 2, -3, 1, -5]], dtype=float)

b_test = np.array([-8, 7, -6, 5, 12, -9, 10, 3, -2], dtype=float)

# Resolver el sistema y mostrar la solución
solucion_test = resolver_sistema_gauss_jordan(A_test, b_test)
if solucion_test is not None:
    print("Solución del sistema:", solucion_test)