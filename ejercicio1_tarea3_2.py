# -*- coding: utf-8 -*-
"""Ejercicio1_Tarea3.2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DlJXVst3xgmroh_X85VdHWj9AU7Uw1a7
"""

import numpy as np

def resolver_sistema_gauss_jordan(A, b):
    """
    Aplica el método de Gauss-Jordan con pivoteo parcial para resolver un sistema de ecuaciones lineales Ax = b.
    Además, calcula e imprime el determinante de A para verificar si el sistema tiene una solución única.
    """
    n = len(A)
    # Construcción de la matriz aumentada
    Ab = np.hstack([A, b.reshape(-1, 1)]).astype(float)

    # Cálculo del determinante de A
    det_A = np.linalg.det(A)

    # Validación de la existencia de una solución única
    if np.isclose(det_A, 0):
        print(f"Determinante de A: {det_A:.5f}. El sistema no tiene una solución única.")
        return None

    print(f"Determinante de A: {det_A:.5f}. El sistema tiene una solución única.")

    # Aplicación del método de Gauss-Jordan con pivoteo parcial
    for i in range(n):
        # Selección de la fila con el pivote más grande en valor absoluto
        fila_max = np.argmax(abs(Ab[i:, i])) + i
        if i != fila_max:
            Ab[[i, fila_max]] = Ab[[fila_max, i]]

        # Normalización de la fila pivote
        Ab[i] /= Ab[i, i]

        # Eliminación en las demás filas
        for j in range(n):
            if i != j:
                Ab[j] -= Ab[j, i] * Ab[i]

    # Extracción del vector solución
    x = Ab[:, -1]
    return x

# Definición de la matriz de coeficientes y el vector de términos independientes
A_prueba = np.array([
    [2, 3, -1, 4, -2, 5, -3, 1],
    [-3, 2, 4, -1, 3, -2, 5, -1],
    [4, -1, 3, 2, -3, -1, -2, 5],
    [-1, 5, -2, 3, 4, -1, 2, -3],
    [3, -2, 3, -1, 4, 2, -3, 1],
    [-2, 4, -3, 3, 4, 5, -2, -4],
    [5, -1, -2, -3, 4, -5, -2, 3],
    [1, -3, 2, -2, 4, -1, 2, -8]
], dtype=float)

b_prueba = np.array([10, -5, 8, 4, -7, 6, -3, 9], dtype=float)

# Resolver el sistema de ecuaciones
solucion = resolver_sistema_gauss_jordan(A_prueba, b_prueba)

# Mostrar la solución si existe
if solucion is not None:
    print("Solución del sistema:", solucion)